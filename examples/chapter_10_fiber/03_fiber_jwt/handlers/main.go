package handlers

import (
	"basic-jwt-auth/dal"
	"basic-jwt-auth/initializer"
	"basic-jwt-auth/models"
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v4"
	"time"
)

// Login –ú–∞—Ä—à—Ä—É—Ç –≤—Ö–æ–¥—É
func Login(c *fiber.Ctx) error {
	// –í–∏—Ç—è–≥–Ω—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
	loginRequest := new(models.LoginRequest)
	if err := c.BodyParser(loginRequest); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": err.Error(),
		})
	}
	// –ó–Ω–∞–π–¥—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
	user, err := dal.FindByCredentials(loginRequest.Email, loginRequest.Password)
	if err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
			"error": err.Error(),
		})
	}
	day := time.Hour * 24
	// –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–∏–º–æ–≥–∏ JWT, —è–∫—ñ –≤–∫–ª—é—á–∞—é—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥—ñ—ó
	claims := jwt.MapClaims{
		"sub": user.ID,
		"fav": user.NickName,
		"exp": time.Now().Add(day * 1).Unix(),
	}
	// –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–æ–∫–µ–Ω
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	// –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
	t, err := token.SignedString([]byte(initializer.Secret))
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": err.Error(),
		})
	}
	// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ç–æ–∫–µ–Ω
	return c.JSON(models.LoginResponse{
		Token: t,
	})
}

// Protected
// –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
func Protected(c *fiber.Ctx) error {
	// –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –π–æ–≥–æ
	user := c.Locals("user").(*jwt.Token)
	claims := user.Claims.(jwt.MapClaims)
	favPhrase := claims["fav"].(string)
	id := int(claims["sub"].(float64))
	return c.SendString(fmt.Sprintf("–í—ñ—Ç–∞—î–º–æ üëã %s (#id: %d)", favPhrase, id))
}
